version: '3.9'
services:
  db:
    image: postgres:16.2
    container_name: db2sem
    mem_limit: 1536MB
    mem_reservation: 1024MB
    restart: unless-stopped
    networks:
      - backend
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./data:/var/lib/postgresql/data/
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
      ##start_period: 10s

  hotelAPI:
    image: cphmk/hotel_api/:latest
    container_name: hotelAPI
    ports:
      - "7070:7070"
    environment:
      - DEPLOYED=true
      - CONNECTION_STR=jdbc:postgresql://db:5432/
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=hotel
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
      - frontend

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Watchtower needs access to the Docker socket
    environment:
      - WATCHTOWER_INTERVAL=60  # Interval in seconds (300s = 5 minutes)
      - WATCHTOWER_CLEANUP=true  # Optional: removes old images after update
      - WATCHTOWER_INCLUDE_STOPPED=true  # Optional: include stopped containers if needed
    command: hotelAPI

  caddy:
    image: caddy:latest
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - frontend

networks:
  backend:
    name: backend
    internal: false # in production, it should be true if you don't want to expose this network to the outside world
    driver: bridge
  frontend:
    name: frontend
    driver: bridge

volumes:
  caddy_data:
  caddy_config:

